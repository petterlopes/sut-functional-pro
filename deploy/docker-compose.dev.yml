services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: sut
      POSTGRES_PASSWORD: sut
      POSTGRES_DB: sut
    ports: ["5432:5432"]
    volumes: [pgdata:/var/lib/postgresql/data]

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    command: ["start-dev", "--http-port=8080", "--import-realm"]
    environment: { KEYCLOAK_ADMIN: admin, KEYCLOAK_ADMIN_PASSWORD: admin }
    volumes:
      - ./keycloak/realm-sut.json:/opt/keycloak/data/import/realm-sut.json
      - ./keycloak/initial_users.json:/opt/keycloak/data/import/initial_users.json:ro
    ports: ["8081:8080"]
    # note: init.d hook is not supported by this image; we run setup via a helper service below

  keycloak-setup:
    image: quay.io/keycloak/keycloak:24.0.5
    entrypoint: ["/bin/sh","-lc"]
    command: "/setup.sh"
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    depends_on: [keycloak]
    volumes:
      - ./keycloak/setup.sh:/setup.sh:ro

  vault:
    image: hashicorp/vault:1.16
    environment: { VAULT_DEV_ROOT_TOKEN_ID: root, VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200 }
    cap_add: [IPC_LOCK]
    ports: ["8200:8200"]

  vault-setup:
    image: hashicorp/vault:1.16
    entrypoint: ["/bin/sh","-lc"]
    command: "./deploy/vault/setup.sh"
    environment: { VAULT_ADDR: http://vault:8200, VAULT_TOKEN: root, PGPASSWORD: sut }
    volumes:
      - ./vault/setup.sh:/deploy/vault/setup.sh
    depends_on: [vault, postgres]

  otel-collector:
    image: otel/opentelemetry-collector:0.99.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes: [ ./otel-collector.yaml:/etc/otel-collector-config.yaml ]
    ports: ["4317:4317","4318:4318"]

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports: ["16686:16686","14250:14250"]
    environment: [ COLLECTOR_ZIPKIN_HOST_PORT=:9411 ]

  tempo:
    image: grafana/tempo:2.5.0
    command: ["-config.file=/etc/tempo.yaml"]
    volumes: [ ./tempo.yaml:/etc/tempo.yaml ]
    ports: ["3200:3200","4319:4317","4320:4318"]

  prometheus:
    image: prom/prometheus:v2.54.1
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes: [ ./prometheus.yml:/etc/prometheus/prometheus.yml ]
    ports: ["9090:9090"]

  grafana:
    image: grafana/grafana:11.2.0
    environment: [ GF_SECURITY_ADMIN_USER=admin, GF_SECURITY_ADMIN_PASSWORD=admin ]
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/dashboards/sut-http.json:/var/lib/grafana/dashboards/sut-http.json
    ports: ["3000:3000"]

  api:
    # Temporarily disabled to prevent restart loop during migration
    build: { context: .., dockerfile: api/Dockerfile }
    environment:
      BIND: 0.0.0.0:8080
      PG_DSN: postgres://sut:sut@postgres:5432/sut
      KEYCLOAK_ISSUER: http://keycloak:8080/realms/sut
      KEYCLOAK_JWKS: http://keycloak:8080/realms/sut/protocol/openid-connect/certs
      KEYCLOAK_AUDIENCE: sut-frontend,account
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_SERVICE_NAME: sut-api
      DEV_AUTH_BYPASS: '0'
    ports: ["8080:8080"]
    restart: "no"
    depends_on: [postgres, keycloak, vault, vault-setup, otel-collector]
    volumes:
      - ./api/migrations:/app/migrations

  frontend:
    image: node:22
    working_dir: /app
    command: bash -lc "npm i -g pnpm && pnpm i && pnpm run gen:sdk && pnpm dev --host"
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - ../openapi.yaml:/openapi.yaml:ro
    ports: ["5173:5173"]
    # When running inside docker-compose the frontend must talk to services by their
    # service name (not localhost). Use the internal network names so the dev server
    # inside the container can reach Keycloak and the API.
    environment:
      VITE_KC_URL: http://keycloak:8080
      VITE_KC_REALM: sut
      VITE_KC_CLIENT: sut-frontend
      VITE_API_BASE: http://api:8080
    depends_on: [api]

volumes: { pgdata: {} }

