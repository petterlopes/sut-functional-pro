{
  "version": 3,
  "sources": ["../../../../../../../node_modules/.pnpm/file+packages+openapi-fetch/node_modules/openapi-fetch/dist/index.js"],
  "sourcesContent": ["// settings & const\nconst DEFAULT_HEADERS = {\n    \"Content-Type\": \"application/json\",\n};\nconst TRAILING_SLASH_RE = /\\/*$/;\nexport default function createClient(clientOptions = {}) {\n    const { fetch = globalThis.fetch, querySerializer: globalQuerySerializer, bodySerializer: globalBodySerializer, ...options } = clientOptions;\n    const defaultHeaders = new Headers({\n        ...DEFAULT_HEADERS,\n        ...(options.headers ?? {}),\n    });\n    async function coreFetch(url, fetchOptions) {\n        const { headers, body: requestBody, params = {}, parseAs = \"json\", querySerializer = globalQuerySerializer ?? defaultQuerySerializer, bodySerializer = globalBodySerializer ?? defaultBodySerializer, ...init } = fetchOptions || {};\n        // URL\n        const finalURL = createFinalURL(url, { baseUrl: options.baseUrl, params, querySerializer });\n        const finalHeaders = mergeHeaders(defaultHeaders, headers, params.header);\n        // fetch!\n        const requestInit = { redirect: \"follow\", ...options, ...init, headers: finalHeaders };\n        if (requestBody)\n            requestInit.body = bodySerializer(requestBody);\n        // remove `Content-Type` if serialized body is FormData; browser will correctly set Content-Type & boundary expression\n        if (requestInit.body instanceof FormData)\n            finalHeaders.delete(\"Content-Type\");\n        const response = await fetch(finalURL, requestInit);\n        // handle empty content\n        // note: we return `{}` because we want user truthy checks for `.data` or `.error` to succeed\n        if (response.status === 204 || response.headers.get(\"Content-Length\") === \"0\") {\n            return response.ok ? { data: {}, response: response } : { error: {}, response: response };\n        }\n        // parse response (falling back to .text() when necessary)\n        if (response.ok) {\n            let data = response.body;\n            if (parseAs !== \"stream\") {\n                const cloned = response.clone();\n                data = typeof cloned[parseAs] === \"function\" ? await cloned[parseAs]() : await cloned.text();\n            }\n            return { data, response: response };\n        }\n        // handle errors (always parse as .json() or .text())\n        let error = {};\n        try {\n            error = await response.clone().json();\n        }\n        catch {\n            error = await response.clone().text();\n        }\n        return { error, response: response };\n    }\n    return {\n        /** Call a GET endpoint */\n        async GET(url, init) {\n            return coreFetch(url, { ...init, method: \"GET\" });\n        },\n        /** Call a PUT endpoint */\n        async PUT(url, init) {\n            return coreFetch(url, { ...init, method: \"PUT\" });\n        },\n        /** Call a POST endpoint */\n        async POST(url, init) {\n            return coreFetch(url, { ...init, method: \"POST\" });\n        },\n        /** Call a DELETE endpoint */\n        async DELETE(url, init) {\n            return coreFetch(url, { ...init, method: \"DELETE\" });\n        },\n        /** Call a OPTIONS endpoint */\n        async OPTIONS(url, init) {\n            return coreFetch(url, { ...init, method: \"OPTIONS\" });\n        },\n        /** Call a HEAD endpoint */\n        async HEAD(url, init) {\n            return coreFetch(url, { ...init, method: \"HEAD\" });\n        },\n        /** Call a PATCH endpoint */\n        async PATCH(url, init) {\n            return coreFetch(url, { ...init, method: \"PATCH\" });\n        },\n        /** Call a TRACE endpoint */\n        async TRACE(url, init) {\n            return coreFetch(url, { ...init, method: \"TRACE\" });\n        },\n    };\n}\n// utils\n/** serialize query params to string */\nexport function defaultQuerySerializer(q) {\n    const search = new URLSearchParams();\n    if (q && typeof q === \"object\") {\n        for (const [k, v] of Object.entries(q)) {\n            if (v === undefined || v === null)\n                continue;\n            search.set(k, v);\n        }\n    }\n    return search.toString();\n}\n/** serialize body object to string */\nexport function defaultBodySerializer(body) {\n    return JSON.stringify(body);\n}\n/** Construct URL string from baseUrl and handle path and query params */\nexport function createFinalURL(url, options) {\n    let finalURL = `${options.baseUrl ? options.baseUrl.replace(TRAILING_SLASH_RE, \"\") : \"\"}${url}`;\n    if (options.params.path) {\n        for (const [k, v] of Object.entries(options.params.path))\n            finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));\n    }\n    if (options.params.query) {\n        const search = options.querySerializer(options.params.query);\n        if (search)\n            finalURL += `?${search}`;\n    }\n    return finalURL;\n}\n/** merge headers a and b, with b taking priority */\nexport function mergeHeaders(...allHeaders) {\n    const headers = new Headers();\n    for (const headerSet of allHeaders) {\n        if (!headerSet || typeof headerSet !== \"object\")\n            continue;\n        const iterator = headerSet instanceof Headers ? headerSet.entries() : Object.entries(headerSet);\n        for (const [k, v] of iterator) {\n            if (v !== undefined && v !== null) {\n                headers.set(k, v);\n            }\n        }\n    }\n    return headers;\n}\n"],
  "mappings": "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",
  "names": []
}
